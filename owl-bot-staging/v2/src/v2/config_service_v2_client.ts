// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v2/config_service_v2_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './config_service_v2_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service for configuring sinks used to route log entries.
 * @class
 * @memberof v2
 */
export class ConfigServiceV2Client {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  configServiceV2Stub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ConfigServiceV2Client.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ConfigServiceV2Client({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ConfigServiceV2Client;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'logging.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      billingAccountCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/cmekSettings'
      ),
      billingAccountExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/exclusions/{exclusion}'
      ),
      billingAccountLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/locations/{location}/buckets/{bucket}'
      ),
      billingAccountLocationBucketLinkPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/locations/{location}/buckets/{bucket}/links/{link}'
      ),
      billingAccountLocationBucketViewPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/locations/{location}/buckets/{bucket}/views/{view}'
      ),
      billingAccountLogPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/logs/{log}'
      ),
      billingAccountSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/settings'
      ),
      billingAccountSinkPathTemplate: new this._gaxModule.PathTemplate(
        'billingAccounts/{billing_account}/sinks/{sink}'
      ),
      folderCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/cmekSettings'
      ),
      folderExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/exclusions/{exclusion}'
      ),
      folderLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/buckets/{bucket}'
      ),
      folderLocationBucketLinkPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/buckets/{bucket}/links/{link}'
      ),
      folderLocationBucketViewPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/buckets/{bucket}/views/{view}'
      ),
      folderLogPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/logs/{log}'
      ),
      folderSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/settings'
      ),
      folderSinkPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/sinks/{sink}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      logMetricPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/metrics/{metric}'
      ),
      organizationCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/cmekSettings'
      ),
      organizationExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/exclusions/{exclusion}'
      ),
      organizationLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/buckets/{bucket}'
      ),
      organizationLocationBucketLinkPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/buckets/{bucket}/links/{link}'
      ),
      organizationLocationBucketViewPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/buckets/{bucket}/views/{view}'
      ),
      organizationLogPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/logs/{log}'
      ),
      organizationSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/settings'
      ),
      organizationSinkPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/sinks/{sink}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectCmekSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/cmekSettings'
      ),
      projectExclusionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/exclusions/{exclusion}'
      ),
      projectLocationBucketPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/buckets/{bucket}'
      ),
      projectLocationBucketLinkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/buckets/{bucket}/links/{link}'
      ),
      projectLocationBucketViewPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/buckets/{bucket}/views/{view}'
      ),
      projectLogPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/logs/{log}'
      ),
      projectSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/settings'
      ),
      projectSinkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/sinks/{sink}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listBuckets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'buckets'),
      listViews:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'views'),
      listSinks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'sinks'),
      listLinks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'links'),
      listExclusions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'exclusions')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.longrunning.Operations.CancelOperation',post: '/v2/{name=*/*/locations/*/operations/*}:cancel',body: '*',additional_bindings: [{post: '/v2/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{post: '/v2/{name=organizations/*/locations/*/operations/*}:cancel',body: '*',},{post: '/v2/{name=folders/*/locations/*/operations/*}:cancel',body: '*',},{post: '/v2/{name=billingAccounts/*/locations/*/operations/*}:cancel',body: '*',}],
      },{selector: 'google.longrunning.Operations.GetOperation',get: '/v2/{name=*/*/locations/*/operations/*}',additional_bindings: [{get: '/v2/{name=projects/*/locations/*/operations/*}',},{get: '/v2/{name=organizations/*/locations/*/operations/*}',},{get: '/v2/{name=folders/*/locations/*/operations/*}',},{get: '/v2/{name=billingAccounts/*/locations/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.ListOperations',get: '/v2/{name=*/*/locations/*}/operations',additional_bindings: [{get: '/v2/{name=projects/*/locations/*}/operations',},{get: '/v2/{name=organizations/*/locations/*}/operations',},{get: '/v2/{name=folders/*/locations/*}/operations',},{get: '/v2/{name=billingAccounts/*/locations/*}/operations',}],
      }];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createBucketAsyncResponse = protoFilesRoot.lookup(
      '.google.logging.v2.LogBucket') as gax.protobuf.Type;
    const createBucketAsyncMetadata = protoFilesRoot.lookup(
      '.google.logging.v2.BucketMetadata') as gax.protobuf.Type;
    const updateBucketAsyncResponse = protoFilesRoot.lookup(
      '.google.logging.v2.LogBucket') as gax.protobuf.Type;
    const updateBucketAsyncMetadata = protoFilesRoot.lookup(
      '.google.logging.v2.BucketMetadata') as gax.protobuf.Type;
    const createLinkResponse = protoFilesRoot.lookup(
      '.google.logging.v2.Link') as gax.protobuf.Type;
    const createLinkMetadata = protoFilesRoot.lookup(
      '.google.logging.v2.LinkMetadata') as gax.protobuf.Type;
    const deleteLinkResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteLinkMetadata = protoFilesRoot.lookup(
      '.google.logging.v2.LinkMetadata') as gax.protobuf.Type;
    const copyLogEntriesResponse = protoFilesRoot.lookup(
      '.google.logging.v2.CopyLogEntriesResponse') as gax.protobuf.Type;
    const copyLogEntriesMetadata = protoFilesRoot.lookup(
      '.google.logging.v2.CopyLogEntriesMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createBucketAsync: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBucketAsyncResponse.decode.bind(createBucketAsyncResponse),
        createBucketAsyncMetadata.decode.bind(createBucketAsyncMetadata)),
      updateBucketAsync: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateBucketAsyncResponse.decode.bind(updateBucketAsyncResponse),
        updateBucketAsyncMetadata.decode.bind(updateBucketAsyncMetadata)),
      createLink: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createLinkResponse.decode.bind(createLinkResponse),
        createLinkMetadata.decode.bind(createLinkMetadata)),
      deleteLink: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteLinkResponse.decode.bind(deleteLinkResponse),
        deleteLinkMetadata.decode.bind(deleteLinkMetadata)),
      copyLogEntries: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        copyLogEntriesResponse.decode.bind(copyLogEntriesResponse),
        copyLogEntriesMetadata.decode.bind(copyLogEntriesMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.logging.v2.ConfigServiceV2', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.configServiceV2Stub) {
      return this.configServiceV2Stub;
    }

    // Put together the "service stub" for
    // google.logging.v2.ConfigServiceV2.
    this.configServiceV2Stub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.logging.v2.ConfigServiceV2') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.logging.v2.ConfigServiceV2,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const configServiceV2StubMethods =
        ['listBuckets', 'getBucket', 'createBucketAsync', 'updateBucketAsync', 'createBucket', 'updateBucket', 'deleteBucket', 'undeleteBucket', 'listViews', 'getView', 'createView', 'updateView', 'deleteView', 'listSinks', 'getSink', 'createSink', 'updateSink', 'deleteSink', 'createLink', 'deleteLink', 'listLinks', 'getLink', 'listExclusions', 'getExclusion', 'createExclusion', 'updateExclusion', 'deleteExclusion', 'getCmekSettings', 'updateCmekSettings', 'getSettings', 'updateSettings', 'copyLogEntries'];
    for (const methodName of configServiceV2StubMethods) {
      const callPromise = this.configServiceV2Stub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.configServiceV2Stub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'logging.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'logging.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
      'https://www.googleapis.com/auth/logging.admin',
      'https://www.googleapis.com/auth/logging.read'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets a log bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the bucket:
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/locations/global/buckets/my-bucket"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogBucket|LogBucket}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.get_bucket.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_GetBucket_async
 */
  getBucket(
      request?: protos.google.logging.v2.IGetBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogBucket,
        protos.google.logging.v2.IGetBucketRequest|undefined, {}|undefined
      ]>;
  getBucket(
      request: protos.google.logging.v2.IGetBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.IGetBucketRequest|null|undefined,
          {}|null|undefined>): void;
  getBucket(
      request: protos.google.logging.v2.IGetBucketRequest,
      callback: Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.IGetBucketRequest|null|undefined,
          {}|null|undefined>): void;
  getBucket(
      request?: protos.google.logging.v2.IGetBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.IGetBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.IGetBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogBucket,
        protos.google.logging.v2.IGetBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getBucket(request, options, callback);
  }
/**
 * Creates a log bucket that can be used to store log entries. After a bucket
 * has been created, the bucket's location cannot be changed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource in which to create the log bucket:
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/locations/global"`
 * @param {string} request.bucketId
 *   Required. A client-assigned identifier such as `"my-bucket"`. Identifiers
 *   are limited to 100 characters and can include only letters, digits,
 *   underscores, hyphens, and periods.
 * @param {google.logging.v2.LogBucket} request.bucket
 *   Required. The new bucket. The region specified in the new bucket must be
 *   compliant with any Location Restriction Org Policy. The name field in the
 *   bucket is ignored.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogBucket|LogBucket}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.create_bucket.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_CreateBucket_async
 */
  createBucket(
      request?: protos.google.logging.v2.ICreateBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogBucket,
        protos.google.logging.v2.ICreateBucketRequest|undefined, {}|undefined
      ]>;
  createBucket(
      request: protos.google.logging.v2.ICreateBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.ICreateBucketRequest|null|undefined,
          {}|null|undefined>): void;
  createBucket(
      request: protos.google.logging.v2.ICreateBucketRequest,
      callback: Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.ICreateBucketRequest|null|undefined,
          {}|null|undefined>): void;
  createBucket(
      request?: protos.google.logging.v2.ICreateBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.ICreateBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.ICreateBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogBucket,
        protos.google.logging.v2.ICreateBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createBucket(request, options, callback);
  }
/**
 * Updates a log bucket.
 *
 * If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
 * `FAILED_PRECONDITION` will be returned.
 *
 * After a bucket has been created, the bucket's location cannot be changed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The full resource name of the bucket to update.
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/locations/global/buckets/my-bucket"`
 * @param {google.logging.v2.LogBucket} request.bucket
 *   Required. The updated bucket.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Field mask that specifies the fields in `bucket` that need an
 *   update. A bucket field will be overwritten if, and only if, it is in the
 *   update mask. `name` and output only fields cannot be updated.
 *
 *   For a detailed `FieldMask` definition, see:
 *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask
 *
 *   For example: `updateMask=retention_days`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogBucket|LogBucket}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.update_bucket.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_UpdateBucket_async
 */
  updateBucket(
      request?: protos.google.logging.v2.IUpdateBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogBucket,
        protos.google.logging.v2.IUpdateBucketRequest|undefined, {}|undefined
      ]>;
  updateBucket(
      request: protos.google.logging.v2.IUpdateBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>): void;
  updateBucket(
      request: protos.google.logging.v2.IUpdateBucketRequest,
      callback: Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>): void;
  updateBucket(
      request?: protos.google.logging.v2.IUpdateBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogBucket,
          protos.google.logging.v2.IUpdateBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogBucket,
        protos.google.logging.v2.IUpdateBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateBucket(request, options, callback);
  }
/**
 * Deletes a log bucket.
 *
 * Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
 * After 7 days, the bucket will be purged and all log entries in the bucket
 * will be permanently deleted.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The full resource name of the bucket to delete.
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/locations/global/buckets/my-bucket"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.delete_bucket.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_DeleteBucket_async
 */
  deleteBucket(
      request?: protos.google.logging.v2.IDeleteBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IDeleteBucketRequest|undefined, {}|undefined
      ]>;
  deleteBucket(
      request: protos.google.logging.v2.IDeleteBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>): void;
  deleteBucket(
      request: protos.google.logging.v2.IDeleteBucketRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>): void;
  deleteBucket(
      request?: protos.google.logging.v2.IDeleteBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IDeleteBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteBucket(request, options, callback);
  }
/**
 * Undeletes a log bucket. A bucket that has been deleted can be undeleted
 * within the grace period of 7 days.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The full resource name of the bucket to undelete.
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/locations/global/buckets/my-bucket"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.undelete_bucket.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_UndeleteBucket_async
 */
  undeleteBucket(
      request?: protos.google.logging.v2.IUndeleteBucketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IUndeleteBucketRequest|undefined, {}|undefined
      ]>;
  undeleteBucket(
      request: protos.google.logging.v2.IUndeleteBucketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IUndeleteBucketRequest|null|undefined,
          {}|null|undefined>): void;
  undeleteBucket(
      request: protos.google.logging.v2.IUndeleteBucketRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IUndeleteBucketRequest|null|undefined,
          {}|null|undefined>): void;
  undeleteBucket(
      request?: protos.google.logging.v2.IUndeleteBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IUndeleteBucketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IUndeleteBucketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IUndeleteBucketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.undeleteBucket(request, options, callback);
  }
/**
 * Gets a view on a log bucket..
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the policy:
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/locations/global/buckets/my-bucket/views/my-view"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogView|LogView}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.get_view.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_GetView_async
 */
  getView(
      request?: protos.google.logging.v2.IGetViewRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogView,
        protos.google.logging.v2.IGetViewRequest|undefined, {}|undefined
      ]>;
  getView(
      request: protos.google.logging.v2.IGetViewRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.IGetViewRequest|null|undefined,
          {}|null|undefined>): void;
  getView(
      request: protos.google.logging.v2.IGetViewRequest,
      callback: Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.IGetViewRequest|null|undefined,
          {}|null|undefined>): void;
  getView(
      request?: protos.google.logging.v2.IGetViewRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.IGetViewRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.IGetViewRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogView,
        protos.google.logging.v2.IGetViewRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getView(request, options, callback);
  }
/**
 * Creates a view over log entries in a log bucket. A bucket may contain a
 * maximum of 30 views.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The bucket in which to create the view
 *
 *       `"projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"`
 *
 *   For example:
 *
 *     `"projects/my-project/locations/global/buckets/my-bucket"`
 * @param {string} request.viewId
 *   Required. A client-assigned identifier such as `"my-view"`. Identifiers are
 *   limited to 100 characters and can include only letters, digits,
 *   underscores, hyphens, and periods.
 * @param {google.logging.v2.LogView} request.view
 *   Required. The new view.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogView|LogView}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.create_view.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_CreateView_async
 */
  createView(
      request?: protos.google.logging.v2.ICreateViewRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogView,
        protos.google.logging.v2.ICreateViewRequest|undefined, {}|undefined
      ]>;
  createView(
      request: protos.google.logging.v2.ICreateViewRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.ICreateViewRequest|null|undefined,
          {}|null|undefined>): void;
  createView(
      request: protos.google.logging.v2.ICreateViewRequest,
      callback: Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.ICreateViewRequest|null|undefined,
          {}|null|undefined>): void;
  createView(
      request?: protos.google.logging.v2.ICreateViewRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.ICreateViewRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.ICreateViewRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogView,
        protos.google.logging.v2.ICreateViewRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createView(request, options, callback);
  }
/**
 * Updates a view on a log bucket. This method replaces the following fields
 * in the existing view with values from the new view: `filter`.
 * If an `UNAVAILABLE` error is returned, this indicates that system is not in
 * a state where it can update the view. If this occurs, please try again in a
 * few minutes.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The full resource name of the view to update
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/locations/global/buckets/my-bucket/views/my-view"`
 * @param {google.logging.v2.LogView} request.view
 *   Required. The updated view.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. Field mask that specifies the fields in `view` that need
 *   an update. A field will be overwritten if, and only if, it is
 *   in the update mask. `name` and output only fields cannot be updated.
 *
 *   For a detailed `FieldMask` definition, see
 *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask
 *
 *   For example: `updateMask=filter`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogView|LogView}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.update_view.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_UpdateView_async
 */
  updateView(
      request?: protos.google.logging.v2.IUpdateViewRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogView,
        protos.google.logging.v2.IUpdateViewRequest|undefined, {}|undefined
      ]>;
  updateView(
      request: protos.google.logging.v2.IUpdateViewRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.IUpdateViewRequest|null|undefined,
          {}|null|undefined>): void;
  updateView(
      request: protos.google.logging.v2.IUpdateViewRequest,
      callback: Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.IUpdateViewRequest|null|undefined,
          {}|null|undefined>): void;
  updateView(
      request?: protos.google.logging.v2.IUpdateViewRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.IUpdateViewRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogView,
          protos.google.logging.v2.IUpdateViewRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogView,
        protos.google.logging.v2.IUpdateViewRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateView(request, options, callback);
  }
/**
 * Deletes a view on a log bucket.
 * If an `UNAVAILABLE` error is returned, this indicates that system is not in
 * a state where it can delete the view. If this occurs, please try again in a
 * few minutes.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The full resource name of the view to delete:
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/views/[VIEW_ID]"
 *
 *   For example:
 *
 *      `"projects/my-project/locations/global/buckets/my-bucket/views/my-view"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.delete_view.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_DeleteView_async
 */
  deleteView(
      request?: protos.google.logging.v2.IDeleteViewRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IDeleteViewRequest|undefined, {}|undefined
      ]>;
  deleteView(
      request: protos.google.logging.v2.IDeleteViewRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteViewRequest|null|undefined,
          {}|null|undefined>): void;
  deleteView(
      request: protos.google.logging.v2.IDeleteViewRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteViewRequest|null|undefined,
          {}|null|undefined>): void;
  deleteView(
      request?: protos.google.logging.v2.IDeleteViewRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteViewRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteViewRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IDeleteViewRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteView(request, options, callback);
  }
/**
 * Gets a sink.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.sinkName
 *   Required. The resource name of the sink:
 *
 *       "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *       "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *       "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/sinks/my-sink"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogSink|LogSink}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.get_sink.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_GetSink_async
 */
  getSink(
      request?: protos.google.logging.v2.IGetSinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogSink,
        protos.google.logging.v2.IGetSinkRequest|undefined, {}|undefined
      ]>;
  getSink(
      request: protos.google.logging.v2.IGetSinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.IGetSinkRequest|null|undefined,
          {}|null|undefined>): void;
  getSink(
      request: protos.google.logging.v2.IGetSinkRequest,
      callback: Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.IGetSinkRequest|null|undefined,
          {}|null|undefined>): void;
  getSink(
      request?: protos.google.logging.v2.IGetSinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.IGetSinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.IGetSinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogSink,
        protos.google.logging.v2.IGetSinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'sink_name': request.sinkName ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getSink(request, options, callback);
  }
/**
 * Creates a sink that exports specified log entries to a destination. The
 * export of newly-ingested log entries begins immediately, unless the sink's
 * `writer_identity` is not permitted to write to the destination. A sink can
 * export log entries only from the resource owning the sink.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource in which to create the sink:
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 *
 *   For examples:
 *
 *     `"projects/my-project"`
 *     `"organizations/123456789"`
 * @param {google.logging.v2.LogSink} request.sink
 *   Required. The new sink, whose `name` parameter is a sink identifier that
 *   is not already in use.
 * @param {boolean} [request.uniqueWriterIdentity]
 *   Optional. Determines the kind of IAM identity returned as `writer_identity`
 *   in the new sink. If this value is omitted or set to false, and if the
 *   sink's parent is a project, then the value returned as `writer_identity` is
 *   the same group or service account used by Cloud Logging before the addition
 *   of writer identities to this API. The sink's destination must be in the
 *   same project as the sink itself.
 *
 *   If this field is set to true, or if the sink is owned by a non-project
 *   resource such as an organization, then the value of `writer_identity` will
 *   be a unique service account used only for exports from the new sink. For
 *   more information, see `writer_identity` in
 *   {@link protos.google.logging.v2.LogSink|LogSink}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogSink|LogSink}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.create_sink.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_CreateSink_async
 */
  createSink(
      request?: protos.google.logging.v2.ICreateSinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogSink,
        protos.google.logging.v2.ICreateSinkRequest|undefined, {}|undefined
      ]>;
  createSink(
      request: protos.google.logging.v2.ICreateSinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.ICreateSinkRequest|null|undefined,
          {}|null|undefined>): void;
  createSink(
      request: protos.google.logging.v2.ICreateSinkRequest,
      callback: Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.ICreateSinkRequest|null|undefined,
          {}|null|undefined>): void;
  createSink(
      request?: protos.google.logging.v2.ICreateSinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.ICreateSinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.ICreateSinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogSink,
        protos.google.logging.v2.ICreateSinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createSink(request, options, callback);
  }
/**
 * Updates a sink. This method replaces the following fields in the existing
 * sink with values from the new sink: `destination`, and `filter`.
 *
 * The updated sink might also have a new `writer_identity`; see the
 * `unique_writer_identity` field.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.sinkName
 *   Required. The full resource name of the sink to update, including the
 *   parent resource and the sink identifier:
 *
 *       "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *       "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *       "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/sinks/my-sink"`
 * @param {google.logging.v2.LogSink} request.sink
 *   Required. The updated sink, whose name is the same identifier that appears
 *   as part of `sink_name`.
 * @param {boolean} [request.uniqueWriterIdentity]
 *   Optional. See {@link protos.google.logging.v2.ConfigServiceV2.CreateSink|sinks.create}
 *   for a description of this field. When updating a sink, the effect of this
 *   field on the value of `writer_identity` in the updated sink depends on both
 *   the old and new values of this field:
 *
 *   +   If the old and new values of this field are both false or both true,
 *       then there is no change to the sink's `writer_identity`.
 *   +   If the old value is false and the new value is true, then
 *       `writer_identity` is changed to a unique service account.
 *   +   It is an error if the old value is true and the new value is
 *       set to false or defaulted to false.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. Field mask that specifies the fields in `sink` that need
 *   an update. A sink field will be overwritten if, and only if, it is
 *   in the update mask. `name` and output only fields cannot be updated.
 *
 *   An empty `updateMask` is temporarily treated as using the following mask
 *   for backwards compatibility purposes:
 *
 *     `destination,filter,includeChildren`
 *
 *   At some point in the future, behavior will be removed and specifying an
 *   empty `updateMask` will be an error.
 *
 *   For a detailed `FieldMask` definition, see
 *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask
 *
 *   For example: `updateMask=filter`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogSink|LogSink}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.update_sink.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_UpdateSink_async
 */
  updateSink(
      request?: protos.google.logging.v2.IUpdateSinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogSink,
        protos.google.logging.v2.IUpdateSinkRequest|undefined, {}|undefined
      ]>;
  updateSink(
      request: protos.google.logging.v2.IUpdateSinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.IUpdateSinkRequest|null|undefined,
          {}|null|undefined>): void;
  updateSink(
      request: protos.google.logging.v2.IUpdateSinkRequest,
      callback: Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.IUpdateSinkRequest|null|undefined,
          {}|null|undefined>): void;
  updateSink(
      request?: protos.google.logging.v2.IUpdateSinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.IUpdateSinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogSink,
          protos.google.logging.v2.IUpdateSinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogSink,
        protos.google.logging.v2.IUpdateSinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'sink_name': request.sinkName ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateSink(request, options, callback);
  }
/**
 * Deletes a sink. If the sink has a unique `writer_identity`, then that
 * service account is also deleted.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.sinkName
 *   Required. The full resource name of the sink to delete, including the
 *   parent resource and the sink identifier:
 *
 *       "projects/[PROJECT_ID]/sinks/[SINK_ID]"
 *       "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]"
 *       "folders/[FOLDER_ID]/sinks/[SINK_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/sinks/my-sink"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.delete_sink.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_DeleteSink_async
 */
  deleteSink(
      request?: protos.google.logging.v2.IDeleteSinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IDeleteSinkRequest|undefined, {}|undefined
      ]>;
  deleteSink(
      request: protos.google.logging.v2.IDeleteSinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteSinkRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSink(
      request: protos.google.logging.v2.IDeleteSinkRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteSinkRequest|null|undefined,
          {}|null|undefined>): void;
  deleteSink(
      request?: protos.google.logging.v2.IDeleteSinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteSinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteSinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IDeleteSinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'sink_name': request.sinkName ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteSink(request, options, callback);
  }
/**
 * Gets a link.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the link:
 *
 *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
 *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
 *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
 *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.Link|Link}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.get_link.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_GetLink_async
 */
  getLink(
      request?: protos.google.logging.v2.IGetLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILink,
        protos.google.logging.v2.IGetLinkRequest|undefined, {}|undefined
      ]>;
  getLink(
      request: protos.google.logging.v2.IGetLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILink,
          protos.google.logging.v2.IGetLinkRequest|null|undefined,
          {}|null|undefined>): void;
  getLink(
      request: protos.google.logging.v2.IGetLinkRequest,
      callback: Callback<
          protos.google.logging.v2.ILink,
          protos.google.logging.v2.IGetLinkRequest|null|undefined,
          {}|null|undefined>): void;
  getLink(
      request?: protos.google.logging.v2.IGetLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILink,
          protos.google.logging.v2.IGetLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILink,
          protos.google.logging.v2.IGetLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILink,
        protos.google.logging.v2.IGetLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getLink(request, options, callback);
  }
/**
 * Gets the description of an exclusion in the _Default sink.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of an existing exclusion:
 *
 *       "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *       "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *       "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/exclusions/my-exclusion"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogExclusion|LogExclusion}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.get_exclusion.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_GetExclusion_async
 */
  getExclusion(
      request?: protos.google.logging.v2.IGetExclusionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogExclusion,
        protos.google.logging.v2.IGetExclusionRequest|undefined, {}|undefined
      ]>;
  getExclusion(
      request: protos.google.logging.v2.IGetExclusionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.IGetExclusionRequest|null|undefined,
          {}|null|undefined>): void;
  getExclusion(
      request: protos.google.logging.v2.IGetExclusionRequest,
      callback: Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.IGetExclusionRequest|null|undefined,
          {}|null|undefined>): void;
  getExclusion(
      request?: protos.google.logging.v2.IGetExclusionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.IGetExclusionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.IGetExclusionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogExclusion,
        protos.google.logging.v2.IGetExclusionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getExclusion(request, options, callback);
  }
/**
 * Creates a new exclusion in the _Default sink in a specified parent
 * resource. Only log entries belonging to that resource can be excluded. You
 * can have up to 10 exclusions in a resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource in which to create the exclusion:
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 *
 *   For examples:
 *
 *     `"projects/my-logging-project"`
 *     `"organizations/123456789"`
 * @param {google.logging.v2.LogExclusion} request.exclusion
 *   Required. The new exclusion, whose `name` parameter is an exclusion name
 *   that is not already used in the parent resource.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogExclusion|LogExclusion}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.create_exclusion.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_CreateExclusion_async
 */
  createExclusion(
      request?: protos.google.logging.v2.ICreateExclusionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogExclusion,
        protos.google.logging.v2.ICreateExclusionRequest|undefined, {}|undefined
      ]>;
  createExclusion(
      request: protos.google.logging.v2.ICreateExclusionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.ICreateExclusionRequest|null|undefined,
          {}|null|undefined>): void;
  createExclusion(
      request: protos.google.logging.v2.ICreateExclusionRequest,
      callback: Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.ICreateExclusionRequest|null|undefined,
          {}|null|undefined>): void;
  createExclusion(
      request?: protos.google.logging.v2.ICreateExclusionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.ICreateExclusionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.ICreateExclusionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogExclusion,
        protos.google.logging.v2.ICreateExclusionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createExclusion(request, options, callback);
  }
/**
 * Changes one or more properties of an existing exclusion in the _Default
 * sink.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the exclusion to update:
 *
 *       "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *       "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *       "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/exclusions/my-exclusion"`
 * @param {google.logging.v2.LogExclusion} request.exclusion
 *   Required. New values for the existing exclusion. Only the fields specified
 *   in `update_mask` are relevant.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. A non-empty list of fields to change in the existing exclusion.
 *   New values for the fields are taken from the corresponding fields in the
 *   {@link protos.google.logging.v2.LogExclusion|LogExclusion} included in this request.
 *   Fields not mentioned in `update_mask` are not changed and are ignored in
 *   the request.
 *
 *   For example, to change the filter and description of an exclusion,
 *   specify an `update_mask` of `"filter,description"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.LogExclusion|LogExclusion}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.update_exclusion.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_UpdateExclusion_async
 */
  updateExclusion(
      request?: protos.google.logging.v2.IUpdateExclusionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogExclusion,
        protos.google.logging.v2.IUpdateExclusionRequest|undefined, {}|undefined
      ]>;
  updateExclusion(
      request: protos.google.logging.v2.IUpdateExclusionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.IUpdateExclusionRequest|null|undefined,
          {}|null|undefined>): void;
  updateExclusion(
      request: protos.google.logging.v2.IUpdateExclusionRequest,
      callback: Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.IUpdateExclusionRequest|null|undefined,
          {}|null|undefined>): void;
  updateExclusion(
      request?: protos.google.logging.v2.IUpdateExclusionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.IUpdateExclusionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ILogExclusion,
          protos.google.logging.v2.IUpdateExclusionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ILogExclusion,
        protos.google.logging.v2.IUpdateExclusionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateExclusion(request, options, callback);
  }
/**
 * Deletes an exclusion in the _Default sink.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of an existing exclusion to delete:
 *
 *       "projects/[PROJECT_ID]/exclusions/[EXCLUSION_ID]"
 *       "organizations/[ORGANIZATION_ID]/exclusions/[EXCLUSION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/exclusions/[EXCLUSION_ID]"
 *       "folders/[FOLDER_ID]/exclusions/[EXCLUSION_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/exclusions/my-exclusion"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.delete_exclusion.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_DeleteExclusion_async
 */
  deleteExclusion(
      request?: protos.google.logging.v2.IDeleteExclusionRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IDeleteExclusionRequest|undefined, {}|undefined
      ]>;
  deleteExclusion(
      request: protos.google.logging.v2.IDeleteExclusionRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteExclusionRequest|null|undefined,
          {}|null|undefined>): void;
  deleteExclusion(
      request: protos.google.logging.v2.IDeleteExclusionRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteExclusionRequest|null|undefined,
          {}|null|undefined>): void;
  deleteExclusion(
      request?: protos.google.logging.v2.IDeleteExclusionRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteExclusionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.logging.v2.IDeleteExclusionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.logging.v2.IDeleteExclusionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteExclusion(request, options, callback);
  }
/**
 * Gets the Logging CMEK settings for the given resource.
 *
 * Note: CMEK for the Log Router can be configured for Google Cloud projects,
 * folders, organizations and billing accounts. Once configured for an
 * organization, it applies to all projects and folders in the Google Cloud
 * organization.
 *
 * See [Enabling CMEK for Log
 * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
 * for more information.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource for which to retrieve CMEK settings.
 *
 *       "projects/[PROJECT_ID]/cmekSettings"
 *       "organizations/[ORGANIZATION_ID]/cmekSettings"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
 *       "folders/[FOLDER_ID]/cmekSettings"
 *
 *   For example:
 *
 *     `"organizations/12345/cmekSettings"`
 *
 *   Note: CMEK for the Log Router can be configured for Google Cloud projects,
 *   folders, organizations and billing accounts. Once configured for an
 *   organization, it applies to all projects and folders in the Google Cloud
 *   organization.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.CmekSettings|CmekSettings}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.get_cmek_settings.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_GetCmekSettings_async
 */
  getCmekSettings(
      request?: protos.google.logging.v2.IGetCmekSettingsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ICmekSettings,
        protos.google.logging.v2.IGetCmekSettingsRequest|undefined, {}|undefined
      ]>;
  getCmekSettings(
      request: protos.google.logging.v2.IGetCmekSettingsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ICmekSettings,
          protos.google.logging.v2.IGetCmekSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  getCmekSettings(
      request: protos.google.logging.v2.IGetCmekSettingsRequest,
      callback: Callback<
          protos.google.logging.v2.ICmekSettings,
          protos.google.logging.v2.IGetCmekSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  getCmekSettings(
      request?: protos.google.logging.v2.IGetCmekSettingsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ICmekSettings,
          protos.google.logging.v2.IGetCmekSettingsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ICmekSettings,
          protos.google.logging.v2.IGetCmekSettingsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ICmekSettings,
        protos.google.logging.v2.IGetCmekSettingsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getCmekSettings(request, options, callback);
  }
/**
 * Updates the Log Router CMEK settings for the given resource.
 *
 * Note: CMEK for the Log Router can currently only be configured for Google
 * Cloud organizations. Once configured, it applies to all projects and
 * folders in the Google Cloud organization.
 *
 * {@link protos.google.logging.v2.ConfigServiceV2.UpdateCmekSettings|UpdateCmekSettings}
 * will fail if 1) `kms_key_name` is invalid, or 2) the associated service
 * account does not have the required
 * `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
 * 3) access to the key is disabled.
 *
 * See [Enabling CMEK for Log
 * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
 * for more information.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name for the CMEK settings to update.
 *
 *       "projects/[PROJECT_ID]/cmekSettings"
 *       "organizations/[ORGANIZATION_ID]/cmekSettings"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/cmekSettings"
 *       "folders/[FOLDER_ID]/cmekSettings"
 *
 *   For example:
 *
 *     `"organizations/12345/cmekSettings"`
 *
 *   Note: CMEK for the Log Router can currently only be configured for Google
 *   Cloud organizations. Once configured, it applies to all projects and
 *   folders in the Google Cloud organization.
 * @param {google.logging.v2.CmekSettings} request.cmekSettings
 *   Required. The CMEK settings to update.
 *
 *   See [Enabling CMEK for Log
 *   Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
 *   for more information.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. Field mask identifying which fields from `cmek_settings` should
 *   be updated. A field will be overwritten if and only if it is in the update
 *   mask. Output only fields cannot be updated.
 *
 *   See {@link protos.google.protobuf.FieldMask|FieldMask} for more information.
 *
 *   For example: `"updateMask=kmsKeyName"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.CmekSettings|CmekSettings}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.update_cmek_settings.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_UpdateCmekSettings_async
 */
  updateCmekSettings(
      request?: protos.google.logging.v2.IUpdateCmekSettingsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ICmekSettings,
        protos.google.logging.v2.IUpdateCmekSettingsRequest|undefined, {}|undefined
      ]>;
  updateCmekSettings(
      request: protos.google.logging.v2.IUpdateCmekSettingsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ICmekSettings,
          protos.google.logging.v2.IUpdateCmekSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  updateCmekSettings(
      request: protos.google.logging.v2.IUpdateCmekSettingsRequest,
      callback: Callback<
          protos.google.logging.v2.ICmekSettings,
          protos.google.logging.v2.IUpdateCmekSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  updateCmekSettings(
      request?: protos.google.logging.v2.IUpdateCmekSettingsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ICmekSettings,
          protos.google.logging.v2.IUpdateCmekSettingsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ICmekSettings,
          protos.google.logging.v2.IUpdateCmekSettingsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ICmekSettings,
        protos.google.logging.v2.IUpdateCmekSettingsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateCmekSettings(request, options, callback);
  }
/**
 * Gets the Log Router settings for the given resource.
 *
 * Note: Settings for the Log Router can be get for Google Cloud projects,
 * folders, organizations and billing accounts. Currently it can only be
 * configured for organizations. Once configured for an organization, it
 * applies to all projects and folders in the Google Cloud organization.
 *
 * See [Enabling CMEK for Log
 * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
 * for more information.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource for which to retrieve settings.
 *
 *       "projects/[PROJECT_ID]/settings"
 *       "organizations/[ORGANIZATION_ID]/settings"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/settings"
 *       "folders/[FOLDER_ID]/settings"
 *
 *   For example:
 *
 *     `"organizations/12345/settings"`
 *
 *   Note: Settings for the Log Router can be get for Google Cloud projects,
 *   folders, organizations and billing accounts. Currently it can only be
 *   configured for organizations. Once configured for an organization, it
 *   applies to all projects and folders in the Google Cloud organization.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.Settings|Settings}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.get_settings.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_GetSettings_async
 */
  getSettings(
      request?: protos.google.logging.v2.IGetSettingsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ISettings,
        protos.google.logging.v2.IGetSettingsRequest|undefined, {}|undefined
      ]>;
  getSettings(
      request: protos.google.logging.v2.IGetSettingsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ISettings,
          protos.google.logging.v2.IGetSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  getSettings(
      request: protos.google.logging.v2.IGetSettingsRequest,
      callback: Callback<
          protos.google.logging.v2.ISettings,
          protos.google.logging.v2.IGetSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  getSettings(
      request?: protos.google.logging.v2.IGetSettingsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ISettings,
          protos.google.logging.v2.IGetSettingsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ISettings,
          protos.google.logging.v2.IGetSettingsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ISettings,
        protos.google.logging.v2.IGetSettingsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.getSettings(request, options, callback);
  }
/**
 * Updates the Log Router settings for the given resource.
 *
 * Note: Settings for the Log Router can currently only be configured for
 * Google Cloud organizations. Once configured, it applies to all projects and
 * folders in the Google Cloud organization.
 *
 * {@link protos.google.logging.v2.ConfigServiceV2.UpdateSettings|UpdateSettings}
 * will fail if 1) `kms_key_name` is invalid, or 2) the associated service
 * account does not have the required
 * `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
 * 3) access to the key is disabled. 4) `location_id` is not supported by
 * Logging. 5) `location_id` violate OrgPolicy.
 *
 * See [Enabling CMEK for Log
 * Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
 * for more information.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name for the settings to update.
 *
 *       "organizations/[ORGANIZATION_ID]/settings"
 *
 *   For example:
 *
 *     `"organizations/12345/settings"`
 *
 *   Note: Settings for the Log Router can currently only be configured for
 *   Google Cloud organizations. Once configured, it applies to all projects and
 *   folders in the Google Cloud organization.
 * @param {google.logging.v2.Settings} request.settings
 *   Required. The settings to update.
 *
 *   See [Enabling CMEK for Log
 *   Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
 *   for more information.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. Field mask identifying which fields from `settings` should
 *   be updated. A field will be overwritten if and only if it is in the update
 *   mask. Output only fields cannot be updated.
 *
 *   See {@link protos.google.protobuf.FieldMask|FieldMask} for more information.
 *
 *   For example: `"updateMask=kmsKeyName"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.logging.v2.Settings|Settings}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.update_settings.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_UpdateSettings_async
 */
  updateSettings(
      request?: protos.google.logging.v2.IUpdateSettingsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ISettings,
        protos.google.logging.v2.IUpdateSettingsRequest|undefined, {}|undefined
      ]>;
  updateSettings(
      request: protos.google.logging.v2.IUpdateSettingsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.logging.v2.ISettings,
          protos.google.logging.v2.IUpdateSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  updateSettings(
      request: protos.google.logging.v2.IUpdateSettingsRequest,
      callback: Callback<
          protos.google.logging.v2.ISettings,
          protos.google.logging.v2.IUpdateSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  updateSettings(
      request?: protos.google.logging.v2.IUpdateSettingsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.logging.v2.ISettings,
          protos.google.logging.v2.IUpdateSettingsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.logging.v2.ISettings,
          protos.google.logging.v2.IUpdateSettingsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.logging.v2.ISettings,
        protos.google.logging.v2.IUpdateSettingsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateSettings(request, options, callback);
  }

/**
 * Creates a log bucket asynchronously that can be used to store log entries.
 *
 * After a bucket has been created, the bucket's location cannot be changed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The resource in which to create the log bucket:
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/locations/global"`
 * @param {string} request.bucketId
 *   Required. A client-assigned identifier such as `"my-bucket"`. Identifiers
 *   are limited to 100 characters and can include only letters, digits,
 *   underscores, hyphens, and periods.
 * @param {google.logging.v2.LogBucket} request.bucket
 *   Required. The new bucket. The region specified in the new bucket must be
 *   compliant with any Location Restriction Org Policy. The name field in the
 *   bucket is ignored.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.create_bucket_async.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_CreateBucketAsync_async
 */
  createBucketAsync(
      request?: protos.google.logging.v2.ICreateBucketRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createBucketAsync(
      request: protos.google.logging.v2.ICreateBucketRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createBucketAsync(
      request: protos.google.logging.v2.ICreateBucketRequest,
      callback: Callback<
          LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createBucketAsync(
      request?: protos.google.logging.v2.ICreateBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createBucketAsync(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createBucketAsync()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.create_bucket_async.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_CreateBucketAsync_async
 */
  async checkCreateBucketAsyncProgress(name: string): Promise<LROperation<protos.google.logging.v2.LogBucket, protos.google.logging.v2.BucketMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createBucketAsync, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.logging.v2.LogBucket, protos.google.logging.v2.BucketMetadata>;
  }
/**
 * Updates a log bucket asynchronously.
 *
 * If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
 * `FAILED_PRECONDITION` will be returned.
 *
 * After a bucket has been created, the bucket's location cannot be changed.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The full resource name of the bucket to update.
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *
 *   For example:
 *
 *     `"projects/my-project/locations/global/buckets/my-bucket"`
 * @param {google.logging.v2.LogBucket} request.bucket
 *   Required. The updated bucket.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Field mask that specifies the fields in `bucket` that need an
 *   update. A bucket field will be overwritten if, and only if, it is in the
 *   update mask. `name` and output only fields cannot be updated.
 *
 *   For a detailed `FieldMask` definition, see:
 *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.FieldMask
 *
 *   For example: `updateMask=retention_days`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.update_bucket_async.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_UpdateBucketAsync_async
 */
  updateBucketAsync(
      request?: protos.google.logging.v2.IUpdateBucketRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateBucketAsync(
      request: protos.google.logging.v2.IUpdateBucketRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateBucketAsync(
      request: protos.google.logging.v2.IUpdateBucketRequest,
      callback: Callback<
          LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateBucketAsync(
      request?: protos.google.logging.v2.IUpdateBucketRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.logging.v2.ILogBucket, protos.google.logging.v2.IBucketMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.updateBucketAsync(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateBucketAsync()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.update_bucket_async.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_UpdateBucketAsync_async
 */
  async checkUpdateBucketAsyncProgress(name: string): Promise<LROperation<protos.google.logging.v2.LogBucket, protos.google.logging.v2.BucketMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateBucketAsync, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.logging.v2.LogBucket, protos.google.logging.v2.BucketMetadata>;
  }
/**
 * Asynchronously creates a linked dataset in BigQuery which makes it possible
 * to use BigQuery to read the logs stored in the log bucket. A log bucket may
 * currently only contain one link.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The full resource name of the bucket to create a link for.
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 *       "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 * @param {google.logging.v2.Link} request.link
 *   Required. The new link.
 * @param {string} request.linkId
 *   Required. The ID to use for the link. The link_id can have up to 100
 *   characters. A valid link_id must only have alphanumeric characters and
 *   underscores within it.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.create_link.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_CreateLink_async
 */
  createLink(
      request?: protos.google.logging.v2.ICreateLinkRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.logging.v2.ILink, protos.google.logging.v2.ILinkMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createLink(
      request: protos.google.logging.v2.ICreateLinkRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.logging.v2.ILink, protos.google.logging.v2.ILinkMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createLink(
      request: protos.google.logging.v2.ICreateLinkRequest,
      callback: Callback<
          LROperation<protos.google.logging.v2.ILink, protos.google.logging.v2.ILinkMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createLink(
      request?: protos.google.logging.v2.ICreateLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.logging.v2.ILink, protos.google.logging.v2.ILinkMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.logging.v2.ILink, protos.google.logging.v2.ILinkMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.logging.v2.ILink, protos.google.logging.v2.ILinkMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.createLink(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createLink()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.create_link.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_CreateLink_async
 */
  async checkCreateLinkProgress(name: string): Promise<LROperation<protos.google.logging.v2.Link, protos.google.logging.v2.LinkMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createLink, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.logging.v2.Link, protos.google.logging.v2.LinkMetadata>;
  }
/**
 * Deletes a link. This will also delete the corresponding BigQuery linked
 * dataset.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The full resource name of the link to delete.
 *
 *    "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
 *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
 *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
 *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/[LINK_ID]"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.delete_link.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_DeleteLink_async
 */
  deleteLink(
      request?: protos.google.logging.v2.IDeleteLinkRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.logging.v2.ILinkMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteLink(
      request: protos.google.logging.v2.IDeleteLinkRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.logging.v2.ILinkMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteLink(
      request: protos.google.logging.v2.IDeleteLinkRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.logging.v2.ILinkMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteLink(
      request?: protos.google.logging.v2.IDeleteLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.logging.v2.ILinkMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.logging.v2.ILinkMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.logging.v2.ILinkMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize();
    return this.innerApiCalls.deleteLink(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteLink()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.delete_link.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_DeleteLink_async
 */
  async checkDeleteLinkProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.logging.v2.LinkMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteLink, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.logging.v2.LinkMetadata>;
  }
/**
 * Copies a set of log entries from a log bucket to a Cloud Storage bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Log bucket from which to copy log entries.
 *
 *   For example:
 *
 *     `"projects/my-project/locations/global/buckets/my-source-bucket"`
 * @param {string} [request.filter]
 *   Optional. A filter specifying which log entries to copy. The filter must be
 *   no more than 20k characters. An empty filter matches all log entries.
 * @param {string} request.destination
 *   Required. Destination to which to copy log entries.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.copy_log_entries.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_CopyLogEntries_async
 */
  copyLogEntries(
      request?: protos.google.logging.v2.ICopyLogEntriesRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.logging.v2.ICopyLogEntriesResponse, protos.google.logging.v2.ICopyLogEntriesMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  copyLogEntries(
      request: protos.google.logging.v2.ICopyLogEntriesRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.logging.v2.ICopyLogEntriesResponse, protos.google.logging.v2.ICopyLogEntriesMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  copyLogEntries(
      request: protos.google.logging.v2.ICopyLogEntriesRequest,
      callback: Callback<
          LROperation<protos.google.logging.v2.ICopyLogEntriesResponse, protos.google.logging.v2.ICopyLogEntriesMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  copyLogEntries(
      request?: protos.google.logging.v2.ICopyLogEntriesRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.logging.v2.ICopyLogEntriesResponse, protos.google.logging.v2.ICopyLogEntriesMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.logging.v2.ICopyLogEntriesResponse, protos.google.logging.v2.ICopyLogEntriesMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.logging.v2.ICopyLogEntriesResponse, protos.google.logging.v2.ICopyLogEntriesMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.copyLogEntries(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `copyLogEntries()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.copy_log_entries.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_CopyLogEntries_async
 */
  async checkCopyLogEntriesProgress(name: string): Promise<LROperation<protos.google.logging.v2.CopyLogEntriesResponse, protos.google.logging.v2.CopyLogEntriesMetadata>>{
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.copyLogEntries, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.logging.v2.CopyLogEntriesResponse, protos.google.logging.v2.CopyLogEntriesMetadata>;
  }
 /**
 * Lists log buckets.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose buckets are to be listed:
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *       "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *       "folders/[FOLDER_ID]/locations/[LOCATION_ID]"
 *
 *   Note: The locations portion of the resource must be specified, but
 *   supplying the character `-` in place of [LOCATION_ID] will return all
 *   buckets.
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.logging.v2.LogBucket|LogBucket}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBucketsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBuckets(
      request?: protos.google.logging.v2.IListBucketsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogBucket[],
        protos.google.logging.v2.IListBucketsRequest|null,
        protos.google.logging.v2.IListBucketsResponse
      ]>;
  listBuckets(
      request: protos.google.logging.v2.IListBucketsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.logging.v2.IListBucketsRequest,
          protos.google.logging.v2.IListBucketsResponse|null|undefined,
          protos.google.logging.v2.ILogBucket>): void;
  listBuckets(
      request: protos.google.logging.v2.IListBucketsRequest,
      callback: PaginationCallback<
          protos.google.logging.v2.IListBucketsRequest,
          protos.google.logging.v2.IListBucketsResponse|null|undefined,
          protos.google.logging.v2.ILogBucket>): void;
  listBuckets(
      request?: protos.google.logging.v2.IListBucketsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.logging.v2.IListBucketsRequest,
          protos.google.logging.v2.IListBucketsResponse|null|undefined,
          protos.google.logging.v2.ILogBucket>,
      callback?: PaginationCallback<
          protos.google.logging.v2.IListBucketsRequest,
          protos.google.logging.v2.IListBucketsResponse|null|undefined,
          protos.google.logging.v2.ILogBucket>):
      Promise<[
        protos.google.logging.v2.ILogBucket[],
        protos.google.logging.v2.IListBucketsRequest|null,
        protos.google.logging.v2.IListBucketsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listBuckets(request, options, callback);
  }

/**
 * Equivalent to `listBuckets`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose buckets are to be listed:
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *       "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *       "folders/[FOLDER_ID]/locations/[LOCATION_ID]"
 *
 *   Note: The locations portion of the resource must be specified, but
 *   supplying the character `-` in place of [LOCATION_ID] will return all
 *   buckets.
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.logging.v2.LogBucket|LogBucket} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBucketsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listBucketsStream(
      request?: protos.google.logging.v2.IListBucketsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBuckets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBuckets.createStream(
      this.innerApiCalls.listBuckets as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBuckets`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose buckets are to be listed:
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]"
 *       "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]"
 *       "folders/[FOLDER_ID]/locations/[LOCATION_ID]"
 *
 *   Note: The locations portion of the resource must be specified, but
 *   supplying the character `-` in place of [LOCATION_ID] will return all
 *   buckets.
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.logging.v2.LogBucket|LogBucket}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.list_buckets.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_ListBuckets_async
 */
  listBucketsAsync(
      request?: protos.google.logging.v2.IListBucketsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.logging.v2.ILogBucket>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listBuckets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listBuckets.asyncIterate(
      this.innerApiCalls['listBuckets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.logging.v2.ILogBucket>;
  }
 /**
 * Lists views on a log bucket.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The bucket whose views are to be listed:
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.logging.v2.LogView|LogView}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listViewsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listViews(
      request?: protos.google.logging.v2.IListViewsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogView[],
        protos.google.logging.v2.IListViewsRequest|null,
        protos.google.logging.v2.IListViewsResponse
      ]>;
  listViews(
      request: protos.google.logging.v2.IListViewsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.logging.v2.IListViewsRequest,
          protos.google.logging.v2.IListViewsResponse|null|undefined,
          protos.google.logging.v2.ILogView>): void;
  listViews(
      request: protos.google.logging.v2.IListViewsRequest,
      callback: PaginationCallback<
          protos.google.logging.v2.IListViewsRequest,
          protos.google.logging.v2.IListViewsResponse|null|undefined,
          protos.google.logging.v2.ILogView>): void;
  listViews(
      request?: protos.google.logging.v2.IListViewsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.logging.v2.IListViewsRequest,
          protos.google.logging.v2.IListViewsResponse|null|undefined,
          protos.google.logging.v2.ILogView>,
      callback?: PaginationCallback<
          protos.google.logging.v2.IListViewsRequest,
          protos.google.logging.v2.IListViewsResponse|null|undefined,
          protos.google.logging.v2.ILogView>):
      Promise<[
        protos.google.logging.v2.ILogView[],
        protos.google.logging.v2.IListViewsRequest|null,
        protos.google.logging.v2.IListViewsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listViews(request, options, callback);
  }

/**
 * Equivalent to `listViews`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The bucket whose views are to be listed:
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.logging.v2.LogView|LogView} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listViewsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listViewsStream(
      request?: protos.google.logging.v2.IListViewsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listViews'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listViews.createStream(
      this.innerApiCalls.listViews as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listViews`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The bucket whose views are to be listed:
 *
 *       "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.logging.v2.LogView|LogView}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.list_views.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_ListViews_async
 */
  listViewsAsync(
      request?: protos.google.logging.v2.IListViewsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.logging.v2.ILogView>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listViews'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listViews.asyncIterate(
      this.innerApiCalls['listViews'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.logging.v2.ILogView>;
  }
 /**
 * Lists sinks.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose sinks are to be listed:
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.logging.v2.LogSink|LogSink}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listSinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listSinks(
      request?: protos.google.logging.v2.IListSinksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogSink[],
        protos.google.logging.v2.IListSinksRequest|null,
        protos.google.logging.v2.IListSinksResponse
      ]>;
  listSinks(
      request: protos.google.logging.v2.IListSinksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.logging.v2.IListSinksRequest,
          protos.google.logging.v2.IListSinksResponse|null|undefined,
          protos.google.logging.v2.ILogSink>): void;
  listSinks(
      request: protos.google.logging.v2.IListSinksRequest,
      callback: PaginationCallback<
          protos.google.logging.v2.IListSinksRequest,
          protos.google.logging.v2.IListSinksResponse|null|undefined,
          protos.google.logging.v2.ILogSink>): void;
  listSinks(
      request?: protos.google.logging.v2.IListSinksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.logging.v2.IListSinksRequest,
          protos.google.logging.v2.IListSinksResponse|null|undefined,
          protos.google.logging.v2.ILogSink>,
      callback?: PaginationCallback<
          protos.google.logging.v2.IListSinksRequest,
          protos.google.logging.v2.IListSinksResponse|null|undefined,
          protos.google.logging.v2.ILogSink>):
      Promise<[
        protos.google.logging.v2.ILogSink[],
        protos.google.logging.v2.IListSinksRequest|null,
        protos.google.logging.v2.IListSinksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listSinks(request, options, callback);
  }

/**
 * Equivalent to `listSinks`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose sinks are to be listed:
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.logging.v2.LogSink|LogSink} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listSinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listSinksStream(
      request?: protos.google.logging.v2.IListSinksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSinks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSinks.createStream(
      this.innerApiCalls.listSinks as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listSinks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose sinks are to be listed:
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.logging.v2.LogSink|LogSink}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.list_sinks.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_ListSinks_async
 */
  listSinksAsync(
      request?: protos.google.logging.v2.IListSinksRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.logging.v2.ILogSink>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listSinks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listSinks.asyncIterate(
      this.innerApiCalls['listSinks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.logging.v2.ILogSink>;
  }
 /**
 * Lists links.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose links are to be listed:
 *
 *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/"
 *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/"
 *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/"
 *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.logging.v2.Link|Link}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listLinks(
      request?: protos.google.logging.v2.IListLinksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILink[],
        protos.google.logging.v2.IListLinksRequest|null,
        protos.google.logging.v2.IListLinksResponse
      ]>;
  listLinks(
      request: protos.google.logging.v2.IListLinksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.logging.v2.IListLinksRequest,
          protos.google.logging.v2.IListLinksResponse|null|undefined,
          protos.google.logging.v2.ILink>): void;
  listLinks(
      request: protos.google.logging.v2.IListLinksRequest,
      callback: PaginationCallback<
          protos.google.logging.v2.IListLinksRequest,
          protos.google.logging.v2.IListLinksResponse|null|undefined,
          protos.google.logging.v2.ILink>): void;
  listLinks(
      request?: protos.google.logging.v2.IListLinksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.logging.v2.IListLinksRequest,
          protos.google.logging.v2.IListLinksResponse|null|undefined,
          protos.google.logging.v2.ILink>,
      callback?: PaginationCallback<
          protos.google.logging.v2.IListLinksRequest,
          protos.google.logging.v2.IListLinksResponse|null|undefined,
          protos.google.logging.v2.ILink>):
      Promise<[
        protos.google.logging.v2.ILink[],
        protos.google.logging.v2.IListLinksRequest|null,
        protos.google.logging.v2.IListLinksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listLinks(request, options, callback);
  }

/**
 * Equivalent to `listLinks`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose links are to be listed:
 *
 *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/"
 *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/"
 *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/"
 *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.logging.v2.Link|Link} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listLinksStream(
      request?: protos.google.logging.v2.IListLinksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listLinks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLinks.createStream(
      this.innerApiCalls.listLinks as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listLinks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose links are to be listed:
 *
 *     "projects/[PROJECT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/links/"
 *     "organizations/[ORGANIZATION_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/"
 *     "billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/"
 *     "folders/[FOLDER_ID]/locations/[LOCATION_ID]/buckets/[BUCKET_ID]/
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.logging.v2.Link|Link}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.list_links.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_ListLinks_async
 */
  listLinksAsync(
      request?: protos.google.logging.v2.IListLinksRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.logging.v2.ILink>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listLinks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listLinks.asyncIterate(
      this.innerApiCalls['listLinks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.logging.v2.ILink>;
  }
 /**
 * Lists all the exclusions on the _Default sink in a parent resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose exclusions are to be listed.
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.logging.v2.LogExclusion|LogExclusion}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listExclusionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listExclusions(
      request?: protos.google.logging.v2.IListExclusionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.logging.v2.ILogExclusion[],
        protos.google.logging.v2.IListExclusionsRequest|null,
        protos.google.logging.v2.IListExclusionsResponse
      ]>;
  listExclusions(
      request: protos.google.logging.v2.IListExclusionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.logging.v2.IListExclusionsRequest,
          protos.google.logging.v2.IListExclusionsResponse|null|undefined,
          protos.google.logging.v2.ILogExclusion>): void;
  listExclusions(
      request: protos.google.logging.v2.IListExclusionsRequest,
      callback: PaginationCallback<
          protos.google.logging.v2.IListExclusionsRequest,
          protos.google.logging.v2.IListExclusionsResponse|null|undefined,
          protos.google.logging.v2.ILogExclusion>): void;
  listExclusions(
      request?: protos.google.logging.v2.IListExclusionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.logging.v2.IListExclusionsRequest,
          protos.google.logging.v2.IListExclusionsResponse|null|undefined,
          protos.google.logging.v2.ILogExclusion>,
      callback?: PaginationCallback<
          protos.google.logging.v2.IListExclusionsRequest,
          protos.google.logging.v2.IListExclusionsResponse|null|undefined,
          protos.google.logging.v2.ILogExclusion>):
      Promise<[
        protos.google.logging.v2.ILogExclusion[],
        protos.google.logging.v2.IListExclusionsRequest|null,
        protos.google.logging.v2.IListExclusionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize();
    return this.innerApiCalls.listExclusions(request, options, callback);
  }

/**
 * Equivalent to `listExclusions`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose exclusions are to be listed.
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.logging.v2.LogExclusion|LogExclusion} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listExclusionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listExclusionsStream(
      request?: protos.google.logging.v2.IListExclusionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listExclusions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listExclusions.createStream(
      this.innerApiCalls.listExclusions as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listExclusions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource whose exclusions are to be listed.
 *
 *       "projects/[PROJECT_ID]"
 *       "organizations/[ORGANIZATION_ID]"
 *       "billingAccounts/[BILLING_ACCOUNT_ID]"
 *       "folders/[FOLDER_ID]"
 * @param {string} [request.pageToken]
 *   Optional. If present, then retrieve the next batch of results from the
 *   preceding call to this method. `pageToken` must be the value of
 *   `nextPageToken` from the previous response. The values of other method
 *   parameters should be identical to those in the previous call.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results to return from this request.
 *   Non-positive values are ignored. The presence of `nextPageToken` in the
 *   response indicates that more results might be available.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.logging.v2.LogExclusion|LogExclusion}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v2/config_service_v2.list_exclusions.js</caption>
 * region_tag:logging_v2_generated_ConfigServiceV2_ListExclusions_async
 */
  listExclusionsAsync(
      request?: protos.google.logging.v2.IListExclusionsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.logging.v2.ILogExclusion>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listExclusions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listExclusions.asyncIterate(
      this.innerApiCalls['listExclusions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.logging.v2.ILogExclusion>;
  }
/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified billingAccountCmekSettings resource name string.
   *
   * @param {string} billing_account
   * @returns {string} Resource name string.
   */
  billingAccountCmekSettingsPath(billingAccount:string) {
    return this.pathTemplates.billingAccountCmekSettingsPathTemplate.render({
      billing_account: billingAccount,
    });
  }

  /**
   * Parse the billing_account from BillingAccountCmekSettings resource.
   *
   * @param {string} billingAccountCmekSettingsName
   *   A fully-qualified path representing billing_account_cmekSettings resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountCmekSettingsName(billingAccountCmekSettingsName: string) {
    return this.pathTemplates.billingAccountCmekSettingsPathTemplate.match(billingAccountCmekSettingsName).billing_account;
  }

  /**
   * Return a fully-qualified billingAccountExclusion resource name string.
   *
   * @param {string} billing_account
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  billingAccountExclusionPath(billingAccount:string,exclusion:string) {
    return this.pathTemplates.billingAccountExclusionPathTemplate.render({
      billing_account: billingAccount,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the billing_account from BillingAccountExclusion resource.
   *
   * @param {string} billingAccountExclusionName
   *   A fully-qualified path representing billing_account_exclusion resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountExclusionName(billingAccountExclusionName: string) {
    return this.pathTemplates.billingAccountExclusionPathTemplate.match(billingAccountExclusionName).billing_account;
  }

  /**
   * Parse the exclusion from BillingAccountExclusion resource.
   *
   * @param {string} billingAccountExclusionName
   *   A fully-qualified path representing billing_account_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromBillingAccountExclusionName(billingAccountExclusionName: string) {
    return this.pathTemplates.billingAccountExclusionPathTemplate.match(billingAccountExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified billingAccountLocationBucket resource name string.
   *
   * @param {string} billing_account
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  billingAccountLocationBucketPath(billingAccount:string,location:string,bucket:string) {
    return this.pathTemplates.billingAccountLocationBucketPathTemplate.render({
      billing_account: billingAccount,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the billing_account from BillingAccountLocationBucket resource.
   *
   * @param {string} billingAccountLocationBucketName
   *   A fully-qualified path representing billing_account_location_bucket resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLocationBucketName(billingAccountLocationBucketName: string) {
    return this.pathTemplates.billingAccountLocationBucketPathTemplate.match(billingAccountLocationBucketName).billing_account;
  }

  /**
   * Parse the location from BillingAccountLocationBucket resource.
   *
   * @param {string} billingAccountLocationBucketName
   *   A fully-qualified path representing billing_account_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBillingAccountLocationBucketName(billingAccountLocationBucketName: string) {
    return this.pathTemplates.billingAccountLocationBucketPathTemplate.match(billingAccountLocationBucketName).location;
  }

  /**
   * Parse the bucket from BillingAccountLocationBucket resource.
   *
   * @param {string} billingAccountLocationBucketName
   *   A fully-qualified path representing billing_account_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromBillingAccountLocationBucketName(billingAccountLocationBucketName: string) {
    return this.pathTemplates.billingAccountLocationBucketPathTemplate.match(billingAccountLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified billingAccountLocationBucketLink resource name string.
   *
   * @param {string} billing_account
   * @param {string} location
   * @param {string} bucket
   * @param {string} link
   * @returns {string} Resource name string.
   */
  billingAccountLocationBucketLinkPath(billingAccount:string,location:string,bucket:string,link:string) {
    return this.pathTemplates.billingAccountLocationBucketLinkPathTemplate.render({
      billing_account: billingAccount,
      location: location,
      bucket: bucket,
      link: link,
    });
  }

  /**
   * Parse the billing_account from BillingAccountLocationBucketLink resource.
   *
   * @param {string} billingAccountLocationBucketLinkName
   *   A fully-qualified path representing billing_account_location_bucket_link resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLocationBucketLinkName(billingAccountLocationBucketLinkName: string) {
    return this.pathTemplates.billingAccountLocationBucketLinkPathTemplate.match(billingAccountLocationBucketLinkName).billing_account;
  }

  /**
   * Parse the location from BillingAccountLocationBucketLink resource.
   *
   * @param {string} billingAccountLocationBucketLinkName
   *   A fully-qualified path representing billing_account_location_bucket_link resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBillingAccountLocationBucketLinkName(billingAccountLocationBucketLinkName: string) {
    return this.pathTemplates.billingAccountLocationBucketLinkPathTemplate.match(billingAccountLocationBucketLinkName).location;
  }

  /**
   * Parse the bucket from BillingAccountLocationBucketLink resource.
   *
   * @param {string} billingAccountLocationBucketLinkName
   *   A fully-qualified path representing billing_account_location_bucket_link resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromBillingAccountLocationBucketLinkName(billingAccountLocationBucketLinkName: string) {
    return this.pathTemplates.billingAccountLocationBucketLinkPathTemplate.match(billingAccountLocationBucketLinkName).bucket;
  }

  /**
   * Parse the link from BillingAccountLocationBucketLink resource.
   *
   * @param {string} billingAccountLocationBucketLinkName
   *   A fully-qualified path representing billing_account_location_bucket_link resource.
   * @returns {string} A string representing the link.
   */
  matchLinkFromBillingAccountLocationBucketLinkName(billingAccountLocationBucketLinkName: string) {
    return this.pathTemplates.billingAccountLocationBucketLinkPathTemplate.match(billingAccountLocationBucketLinkName).link;
  }

  /**
   * Return a fully-qualified billingAccountLocationBucketView resource name string.
   *
   * @param {string} billing_account
   * @param {string} location
   * @param {string} bucket
   * @param {string} view
   * @returns {string} Resource name string.
   */
  billingAccountLocationBucketViewPath(billingAccount:string,location:string,bucket:string,view:string) {
    return this.pathTemplates.billingAccountLocationBucketViewPathTemplate.render({
      billing_account: billingAccount,
      location: location,
      bucket: bucket,
      view: view,
    });
  }

  /**
   * Parse the billing_account from BillingAccountLocationBucketView resource.
   *
   * @param {string} billingAccountLocationBucketViewName
   *   A fully-qualified path representing billing_account_location_bucket_view resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLocationBucketViewName(billingAccountLocationBucketViewName: string) {
    return this.pathTemplates.billingAccountLocationBucketViewPathTemplate.match(billingAccountLocationBucketViewName).billing_account;
  }

  /**
   * Parse the location from BillingAccountLocationBucketView resource.
   *
   * @param {string} billingAccountLocationBucketViewName
   *   A fully-qualified path representing billing_account_location_bucket_view resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromBillingAccountLocationBucketViewName(billingAccountLocationBucketViewName: string) {
    return this.pathTemplates.billingAccountLocationBucketViewPathTemplate.match(billingAccountLocationBucketViewName).location;
  }

  /**
   * Parse the bucket from BillingAccountLocationBucketView resource.
   *
   * @param {string} billingAccountLocationBucketViewName
   *   A fully-qualified path representing billing_account_location_bucket_view resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromBillingAccountLocationBucketViewName(billingAccountLocationBucketViewName: string) {
    return this.pathTemplates.billingAccountLocationBucketViewPathTemplate.match(billingAccountLocationBucketViewName).bucket;
  }

  /**
   * Parse the view from BillingAccountLocationBucketView resource.
   *
   * @param {string} billingAccountLocationBucketViewName
   *   A fully-qualified path representing billing_account_location_bucket_view resource.
   * @returns {string} A string representing the view.
   */
  matchViewFromBillingAccountLocationBucketViewName(billingAccountLocationBucketViewName: string) {
    return this.pathTemplates.billingAccountLocationBucketViewPathTemplate.match(billingAccountLocationBucketViewName).view;
  }

  /**
   * Return a fully-qualified billingAccountLog resource name string.
   *
   * @param {string} billing_account
   * @param {string} log
   * @returns {string} Resource name string.
   */
  billingAccountLogPath(billingAccount:string,log:string) {
    return this.pathTemplates.billingAccountLogPathTemplate.render({
      billing_account: billingAccount,
      log: log,
    });
  }

  /**
   * Parse the billing_account from BillingAccountLog resource.
   *
   * @param {string} billingAccountLogName
   *   A fully-qualified path representing billing_account_log resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountLogName(billingAccountLogName: string) {
    return this.pathTemplates.billingAccountLogPathTemplate.match(billingAccountLogName).billing_account;
  }

  /**
   * Parse the log from BillingAccountLog resource.
   *
   * @param {string} billingAccountLogName
   *   A fully-qualified path representing billing_account_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromBillingAccountLogName(billingAccountLogName: string) {
    return this.pathTemplates.billingAccountLogPathTemplate.match(billingAccountLogName).log;
  }

  /**
   * Return a fully-qualified billingAccountSettings resource name string.
   *
   * @param {string} billing_account
   * @returns {string} Resource name string.
   */
  billingAccountSettingsPath(billingAccount:string) {
    return this.pathTemplates.billingAccountSettingsPathTemplate.render({
      billing_account: billingAccount,
    });
  }

  /**
   * Parse the billing_account from BillingAccountSettings resource.
   *
   * @param {string} billingAccountSettingsName
   *   A fully-qualified path representing billing_account_settings resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountSettingsName(billingAccountSettingsName: string) {
    return this.pathTemplates.billingAccountSettingsPathTemplate.match(billingAccountSettingsName).billing_account;
  }

  /**
   * Return a fully-qualified billingAccountSink resource name string.
   *
   * @param {string} billing_account
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  billingAccountSinkPath(billingAccount:string,sink:string) {
    return this.pathTemplates.billingAccountSinkPathTemplate.render({
      billing_account: billingAccount,
      sink: sink,
    });
  }

  /**
   * Parse the billing_account from BillingAccountSink resource.
   *
   * @param {string} billingAccountSinkName
   *   A fully-qualified path representing billing_account_sink resource.
   * @returns {string} A string representing the billing_account.
   */
  matchBillingAccountFromBillingAccountSinkName(billingAccountSinkName: string) {
    return this.pathTemplates.billingAccountSinkPathTemplate.match(billingAccountSinkName).billing_account;
  }

  /**
   * Parse the sink from BillingAccountSink resource.
   *
   * @param {string} billingAccountSinkName
   *   A fully-qualified path representing billing_account_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromBillingAccountSinkName(billingAccountSinkName: string) {
    return this.pathTemplates.billingAccountSinkPathTemplate.match(billingAccountSinkName).sink;
  }

  /**
   * Return a fully-qualified folderCmekSettings resource name string.
   *
   * @param {string} folder
   * @returns {string} Resource name string.
   */
  folderCmekSettingsPath(folder:string) {
    return this.pathTemplates.folderCmekSettingsPathTemplate.render({
      folder: folder,
    });
  }

  /**
   * Parse the folder from FolderCmekSettings resource.
   *
   * @param {string} folderCmekSettingsName
   *   A fully-qualified path representing folder_cmekSettings resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderCmekSettingsName(folderCmekSettingsName: string) {
    return this.pathTemplates.folderCmekSettingsPathTemplate.match(folderCmekSettingsName).folder;
  }

  /**
   * Return a fully-qualified folderExclusion resource name string.
   *
   * @param {string} folder
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  folderExclusionPath(folder:string,exclusion:string) {
    return this.pathTemplates.folderExclusionPathTemplate.render({
      folder: folder,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the folder from FolderExclusion resource.
   *
   * @param {string} folderExclusionName
   *   A fully-qualified path representing folder_exclusion resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderExclusionName(folderExclusionName: string) {
    return this.pathTemplates.folderExclusionPathTemplate.match(folderExclusionName).folder;
  }

  /**
   * Parse the exclusion from FolderExclusion resource.
   *
   * @param {string} folderExclusionName
   *   A fully-qualified path representing folder_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromFolderExclusionName(folderExclusionName: string) {
    return this.pathTemplates.folderExclusionPathTemplate.match(folderExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified folderLocationBucket resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  folderLocationBucketPath(folder:string,location:string,bucket:string) {
    return this.pathTemplates.folderLocationBucketPathTemplate.render({
      folder: folder,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the folder from FolderLocationBucket resource.
   *
   * @param {string} folderLocationBucketName
   *   A fully-qualified path representing folder_location_bucket resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationBucketName(folderLocationBucketName: string) {
    return this.pathTemplates.folderLocationBucketPathTemplate.match(folderLocationBucketName).folder;
  }

  /**
   * Parse the location from FolderLocationBucket resource.
   *
   * @param {string} folderLocationBucketName
   *   A fully-qualified path representing folder_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationBucketName(folderLocationBucketName: string) {
    return this.pathTemplates.folderLocationBucketPathTemplate.match(folderLocationBucketName).location;
  }

  /**
   * Parse the bucket from FolderLocationBucket resource.
   *
   * @param {string} folderLocationBucketName
   *   A fully-qualified path representing folder_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromFolderLocationBucketName(folderLocationBucketName: string) {
    return this.pathTemplates.folderLocationBucketPathTemplate.match(folderLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified folderLocationBucketLink resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} bucket
   * @param {string} link
   * @returns {string} Resource name string.
   */
  folderLocationBucketLinkPath(folder:string,location:string,bucket:string,link:string) {
    return this.pathTemplates.folderLocationBucketLinkPathTemplate.render({
      folder: folder,
      location: location,
      bucket: bucket,
      link: link,
    });
  }

  /**
   * Parse the folder from FolderLocationBucketLink resource.
   *
   * @param {string} folderLocationBucketLinkName
   *   A fully-qualified path representing folder_location_bucket_link resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationBucketLinkName(folderLocationBucketLinkName: string) {
    return this.pathTemplates.folderLocationBucketLinkPathTemplate.match(folderLocationBucketLinkName).folder;
  }

  /**
   * Parse the location from FolderLocationBucketLink resource.
   *
   * @param {string} folderLocationBucketLinkName
   *   A fully-qualified path representing folder_location_bucket_link resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationBucketLinkName(folderLocationBucketLinkName: string) {
    return this.pathTemplates.folderLocationBucketLinkPathTemplate.match(folderLocationBucketLinkName).location;
  }

  /**
   * Parse the bucket from FolderLocationBucketLink resource.
   *
   * @param {string} folderLocationBucketLinkName
   *   A fully-qualified path representing folder_location_bucket_link resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromFolderLocationBucketLinkName(folderLocationBucketLinkName: string) {
    return this.pathTemplates.folderLocationBucketLinkPathTemplate.match(folderLocationBucketLinkName).bucket;
  }

  /**
   * Parse the link from FolderLocationBucketLink resource.
   *
   * @param {string} folderLocationBucketLinkName
   *   A fully-qualified path representing folder_location_bucket_link resource.
   * @returns {string} A string representing the link.
   */
  matchLinkFromFolderLocationBucketLinkName(folderLocationBucketLinkName: string) {
    return this.pathTemplates.folderLocationBucketLinkPathTemplate.match(folderLocationBucketLinkName).link;
  }

  /**
   * Return a fully-qualified folderLocationBucketView resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} bucket
   * @param {string} view
   * @returns {string} Resource name string.
   */
  folderLocationBucketViewPath(folder:string,location:string,bucket:string,view:string) {
    return this.pathTemplates.folderLocationBucketViewPathTemplate.render({
      folder: folder,
      location: location,
      bucket: bucket,
      view: view,
    });
  }

  /**
   * Parse the folder from FolderLocationBucketView resource.
   *
   * @param {string} folderLocationBucketViewName
   *   A fully-qualified path representing folder_location_bucket_view resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationBucketViewName(folderLocationBucketViewName: string) {
    return this.pathTemplates.folderLocationBucketViewPathTemplate.match(folderLocationBucketViewName).folder;
  }

  /**
   * Parse the location from FolderLocationBucketView resource.
   *
   * @param {string} folderLocationBucketViewName
   *   A fully-qualified path representing folder_location_bucket_view resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationBucketViewName(folderLocationBucketViewName: string) {
    return this.pathTemplates.folderLocationBucketViewPathTemplate.match(folderLocationBucketViewName).location;
  }

  /**
   * Parse the bucket from FolderLocationBucketView resource.
   *
   * @param {string} folderLocationBucketViewName
   *   A fully-qualified path representing folder_location_bucket_view resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromFolderLocationBucketViewName(folderLocationBucketViewName: string) {
    return this.pathTemplates.folderLocationBucketViewPathTemplate.match(folderLocationBucketViewName).bucket;
  }

  /**
   * Parse the view from FolderLocationBucketView resource.
   *
   * @param {string} folderLocationBucketViewName
   *   A fully-qualified path representing folder_location_bucket_view resource.
   * @returns {string} A string representing the view.
   */
  matchViewFromFolderLocationBucketViewName(folderLocationBucketViewName: string) {
    return this.pathTemplates.folderLocationBucketViewPathTemplate.match(folderLocationBucketViewName).view;
  }

  /**
   * Return a fully-qualified folderLog resource name string.
   *
   * @param {string} folder
   * @param {string} log
   * @returns {string} Resource name string.
   */
  folderLogPath(folder:string,log:string) {
    return this.pathTemplates.folderLogPathTemplate.render({
      folder: folder,
      log: log,
    });
  }

  /**
   * Parse the folder from FolderLog resource.
   *
   * @param {string} folderLogName
   *   A fully-qualified path representing folder_log resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLogName(folderLogName: string) {
    return this.pathTemplates.folderLogPathTemplate.match(folderLogName).folder;
  }

  /**
   * Parse the log from FolderLog resource.
   *
   * @param {string} folderLogName
   *   A fully-qualified path representing folder_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromFolderLogName(folderLogName: string) {
    return this.pathTemplates.folderLogPathTemplate.match(folderLogName).log;
  }

  /**
   * Return a fully-qualified folderSettings resource name string.
   *
   * @param {string} folder
   * @returns {string} Resource name string.
   */
  folderSettingsPath(folder:string) {
    return this.pathTemplates.folderSettingsPathTemplate.render({
      folder: folder,
    });
  }

  /**
   * Parse the folder from FolderSettings resource.
   *
   * @param {string} folderSettingsName
   *   A fully-qualified path representing folder_settings resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderSettingsName(folderSettingsName: string) {
    return this.pathTemplates.folderSettingsPathTemplate.match(folderSettingsName).folder;
  }

  /**
   * Return a fully-qualified folderSink resource name string.
   *
   * @param {string} folder
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  folderSinkPath(folder:string,sink:string) {
    return this.pathTemplates.folderSinkPathTemplate.render({
      folder: folder,
      sink: sink,
    });
  }

  /**
   * Parse the folder from FolderSink resource.
   *
   * @param {string} folderSinkName
   *   A fully-qualified path representing folder_sink resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderSinkName(folderSinkName: string) {
    return this.pathTemplates.folderSinkPathTemplate.match(folderSinkName).folder;
  }

  /**
   * Parse the sink from FolderSink resource.
   *
   * @param {string} folderSinkName
   *   A fully-qualified path representing folder_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromFolderSinkName(folderSinkName: string) {
    return this.pathTemplates.folderSinkPathTemplate.match(folderSinkName).sink;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified logMetric resource name string.
   *
   * @param {string} project
   * @param {string} metric
   * @returns {string} Resource name string.
   */
  logMetricPath(project:string,metric:string) {
    return this.pathTemplates.logMetricPathTemplate.render({
      project: project,
      metric: metric,
    });
  }

  /**
   * Parse the project from LogMetric resource.
   *
   * @param {string} logMetricName
   *   A fully-qualified path representing LogMetric resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLogMetricName(logMetricName: string) {
    return this.pathTemplates.logMetricPathTemplate.match(logMetricName).project;
  }

  /**
   * Parse the metric from LogMetric resource.
   *
   * @param {string} logMetricName
   *   A fully-qualified path representing LogMetric resource.
   * @returns {string} A string representing the metric.
   */
  matchMetricFromLogMetricName(logMetricName: string) {
    return this.pathTemplates.logMetricPathTemplate.match(logMetricName).metric;
  }

  /**
   * Return a fully-qualified organizationCmekSettings resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationCmekSettingsPath(organization:string) {
    return this.pathTemplates.organizationCmekSettingsPathTemplate.render({
      organization: organization,
    });
  }

  /**
   * Parse the organization from OrganizationCmekSettings resource.
   *
   * @param {string} organizationCmekSettingsName
   *   A fully-qualified path representing organization_cmekSettings resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationCmekSettingsName(organizationCmekSettingsName: string) {
    return this.pathTemplates.organizationCmekSettingsPathTemplate.match(organizationCmekSettingsName).organization;
  }

  /**
   * Return a fully-qualified organizationExclusion resource name string.
   *
   * @param {string} organization
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  organizationExclusionPath(organization:string,exclusion:string) {
    return this.pathTemplates.organizationExclusionPathTemplate.render({
      organization: organization,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the organization from OrganizationExclusion resource.
   *
   * @param {string} organizationExclusionName
   *   A fully-qualified path representing organization_exclusion resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationExclusionName(organizationExclusionName: string) {
    return this.pathTemplates.organizationExclusionPathTemplate.match(organizationExclusionName).organization;
  }

  /**
   * Parse the exclusion from OrganizationExclusion resource.
   *
   * @param {string} organizationExclusionName
   *   A fully-qualified path representing organization_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromOrganizationExclusionName(organizationExclusionName: string) {
    return this.pathTemplates.organizationExclusionPathTemplate.match(organizationExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified organizationLocationBucket resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  organizationLocationBucketPath(organization:string,location:string,bucket:string) {
    return this.pathTemplates.organizationLocationBucketPathTemplate.render({
      organization: organization,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the organization from OrganizationLocationBucket resource.
   *
   * @param {string} organizationLocationBucketName
   *   A fully-qualified path representing organization_location_bucket resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationBucketName(organizationLocationBucketName: string) {
    return this.pathTemplates.organizationLocationBucketPathTemplate.match(organizationLocationBucketName).organization;
  }

  /**
   * Parse the location from OrganizationLocationBucket resource.
   *
   * @param {string} organizationLocationBucketName
   *   A fully-qualified path representing organization_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationBucketName(organizationLocationBucketName: string) {
    return this.pathTemplates.organizationLocationBucketPathTemplate.match(organizationLocationBucketName).location;
  }

  /**
   * Parse the bucket from OrganizationLocationBucket resource.
   *
   * @param {string} organizationLocationBucketName
   *   A fully-qualified path representing organization_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromOrganizationLocationBucketName(organizationLocationBucketName: string) {
    return this.pathTemplates.organizationLocationBucketPathTemplate.match(organizationLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified organizationLocationBucketLink resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} bucket
   * @param {string} link
   * @returns {string} Resource name string.
   */
  organizationLocationBucketLinkPath(organization:string,location:string,bucket:string,link:string) {
    return this.pathTemplates.organizationLocationBucketLinkPathTemplate.render({
      organization: organization,
      location: location,
      bucket: bucket,
      link: link,
    });
  }

  /**
   * Parse the organization from OrganizationLocationBucketLink resource.
   *
   * @param {string} organizationLocationBucketLinkName
   *   A fully-qualified path representing organization_location_bucket_link resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationBucketLinkName(organizationLocationBucketLinkName: string) {
    return this.pathTemplates.organizationLocationBucketLinkPathTemplate.match(organizationLocationBucketLinkName).organization;
  }

  /**
   * Parse the location from OrganizationLocationBucketLink resource.
   *
   * @param {string} organizationLocationBucketLinkName
   *   A fully-qualified path representing organization_location_bucket_link resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationBucketLinkName(organizationLocationBucketLinkName: string) {
    return this.pathTemplates.organizationLocationBucketLinkPathTemplate.match(organizationLocationBucketLinkName).location;
  }

  /**
   * Parse the bucket from OrganizationLocationBucketLink resource.
   *
   * @param {string} organizationLocationBucketLinkName
   *   A fully-qualified path representing organization_location_bucket_link resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromOrganizationLocationBucketLinkName(organizationLocationBucketLinkName: string) {
    return this.pathTemplates.organizationLocationBucketLinkPathTemplate.match(organizationLocationBucketLinkName).bucket;
  }

  /**
   * Parse the link from OrganizationLocationBucketLink resource.
   *
   * @param {string} organizationLocationBucketLinkName
   *   A fully-qualified path representing organization_location_bucket_link resource.
   * @returns {string} A string representing the link.
   */
  matchLinkFromOrganizationLocationBucketLinkName(organizationLocationBucketLinkName: string) {
    return this.pathTemplates.organizationLocationBucketLinkPathTemplate.match(organizationLocationBucketLinkName).link;
  }

  /**
   * Return a fully-qualified organizationLocationBucketView resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} bucket
   * @param {string} view
   * @returns {string} Resource name string.
   */
  organizationLocationBucketViewPath(organization:string,location:string,bucket:string,view:string) {
    return this.pathTemplates.organizationLocationBucketViewPathTemplate.render({
      organization: organization,
      location: location,
      bucket: bucket,
      view: view,
    });
  }

  /**
   * Parse the organization from OrganizationLocationBucketView resource.
   *
   * @param {string} organizationLocationBucketViewName
   *   A fully-qualified path representing organization_location_bucket_view resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationBucketViewName(organizationLocationBucketViewName: string) {
    return this.pathTemplates.organizationLocationBucketViewPathTemplate.match(organizationLocationBucketViewName).organization;
  }

  /**
   * Parse the location from OrganizationLocationBucketView resource.
   *
   * @param {string} organizationLocationBucketViewName
   *   A fully-qualified path representing organization_location_bucket_view resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationBucketViewName(organizationLocationBucketViewName: string) {
    return this.pathTemplates.organizationLocationBucketViewPathTemplate.match(organizationLocationBucketViewName).location;
  }

  /**
   * Parse the bucket from OrganizationLocationBucketView resource.
   *
   * @param {string} organizationLocationBucketViewName
   *   A fully-qualified path representing organization_location_bucket_view resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromOrganizationLocationBucketViewName(organizationLocationBucketViewName: string) {
    return this.pathTemplates.organizationLocationBucketViewPathTemplate.match(organizationLocationBucketViewName).bucket;
  }

  /**
   * Parse the view from OrganizationLocationBucketView resource.
   *
   * @param {string} organizationLocationBucketViewName
   *   A fully-qualified path representing organization_location_bucket_view resource.
   * @returns {string} A string representing the view.
   */
  matchViewFromOrganizationLocationBucketViewName(organizationLocationBucketViewName: string) {
    return this.pathTemplates.organizationLocationBucketViewPathTemplate.match(organizationLocationBucketViewName).view;
  }

  /**
   * Return a fully-qualified organizationLog resource name string.
   *
   * @param {string} organization
   * @param {string} log
   * @returns {string} Resource name string.
   */
  organizationLogPath(organization:string,log:string) {
    return this.pathTemplates.organizationLogPathTemplate.render({
      organization: organization,
      log: log,
    });
  }

  /**
   * Parse the organization from OrganizationLog resource.
   *
   * @param {string} organizationLogName
   *   A fully-qualified path representing organization_log resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLogName(organizationLogName: string) {
    return this.pathTemplates.organizationLogPathTemplate.match(organizationLogName).organization;
  }

  /**
   * Parse the log from OrganizationLog resource.
   *
   * @param {string} organizationLogName
   *   A fully-qualified path representing organization_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromOrganizationLogName(organizationLogName: string) {
    return this.pathTemplates.organizationLogPathTemplate.match(organizationLogName).log;
  }

  /**
   * Return a fully-qualified organizationSettings resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationSettingsPath(organization:string) {
    return this.pathTemplates.organizationSettingsPathTemplate.render({
      organization: organization,
    });
  }

  /**
   * Parse the organization from OrganizationSettings resource.
   *
   * @param {string} organizationSettingsName
   *   A fully-qualified path representing organization_settings resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSettingsName(organizationSettingsName: string) {
    return this.pathTemplates.organizationSettingsPathTemplate.match(organizationSettingsName).organization;
  }

  /**
   * Return a fully-qualified organizationSink resource name string.
   *
   * @param {string} organization
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  organizationSinkPath(organization:string,sink:string) {
    return this.pathTemplates.organizationSinkPathTemplate.render({
      organization: organization,
      sink: sink,
    });
  }

  /**
   * Parse the organization from OrganizationSink resource.
   *
   * @param {string} organizationSinkName
   *   A fully-qualified path representing organization_sink resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationSinkName(organizationSinkName: string) {
    return this.pathTemplates.organizationSinkPathTemplate.match(organizationSinkName).organization;
  }

  /**
   * Parse the sink from OrganizationSink resource.
   *
   * @param {string} organizationSinkName
   *   A fully-qualified path representing organization_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromOrganizationSinkName(organizationSinkName: string) {
    return this.pathTemplates.organizationSinkPathTemplate.match(organizationSinkName).sink;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectCmekSettings resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectCmekSettingsPath(project:string) {
    return this.pathTemplates.projectCmekSettingsPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from ProjectCmekSettings resource.
   *
   * @param {string} projectCmekSettingsName
   *   A fully-qualified path representing project_cmekSettings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectCmekSettingsName(projectCmekSettingsName: string) {
    return this.pathTemplates.projectCmekSettingsPathTemplate.match(projectCmekSettingsName).project;
  }

  /**
   * Return a fully-qualified projectExclusion resource name string.
   *
   * @param {string} project
   * @param {string} exclusion
   * @returns {string} Resource name string.
   */
  projectExclusionPath(project:string,exclusion:string) {
    return this.pathTemplates.projectExclusionPathTemplate.render({
      project: project,
      exclusion: exclusion,
    });
  }

  /**
   * Parse the project from ProjectExclusion resource.
   *
   * @param {string} projectExclusionName
   *   A fully-qualified path representing project_exclusion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectExclusionName(projectExclusionName: string) {
    return this.pathTemplates.projectExclusionPathTemplate.match(projectExclusionName).project;
  }

  /**
   * Parse the exclusion from ProjectExclusion resource.
   *
   * @param {string} projectExclusionName
   *   A fully-qualified path representing project_exclusion resource.
   * @returns {string} A string representing the exclusion.
   */
  matchExclusionFromProjectExclusionName(projectExclusionName: string) {
    return this.pathTemplates.projectExclusionPathTemplate.match(projectExclusionName).exclusion;
  }

  /**
   * Return a fully-qualified projectLocationBucket resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} bucket
   * @returns {string} Resource name string.
   */
  projectLocationBucketPath(project:string,location:string,bucket:string) {
    return this.pathTemplates.projectLocationBucketPathTemplate.render({
      project: project,
      location: location,
      bucket: bucket,
    });
  }

  /**
   * Parse the project from ProjectLocationBucket resource.
   *
   * @param {string} projectLocationBucketName
   *   A fully-qualified path representing project_location_bucket resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationBucketName(projectLocationBucketName: string) {
    return this.pathTemplates.projectLocationBucketPathTemplate.match(projectLocationBucketName).project;
  }

  /**
   * Parse the location from ProjectLocationBucket resource.
   *
   * @param {string} projectLocationBucketName
   *   A fully-qualified path representing project_location_bucket resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationBucketName(projectLocationBucketName: string) {
    return this.pathTemplates.projectLocationBucketPathTemplate.match(projectLocationBucketName).location;
  }

  /**
   * Parse the bucket from ProjectLocationBucket resource.
   *
   * @param {string} projectLocationBucketName
   *   A fully-qualified path representing project_location_bucket resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromProjectLocationBucketName(projectLocationBucketName: string) {
    return this.pathTemplates.projectLocationBucketPathTemplate.match(projectLocationBucketName).bucket;
  }

  /**
   * Return a fully-qualified projectLocationBucketLink resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} bucket
   * @param {string} link
   * @returns {string} Resource name string.
   */
  projectLocationBucketLinkPath(project:string,location:string,bucket:string,link:string) {
    return this.pathTemplates.projectLocationBucketLinkPathTemplate.render({
      project: project,
      location: location,
      bucket: bucket,
      link: link,
    });
  }

  /**
   * Parse the project from ProjectLocationBucketLink resource.
   *
   * @param {string} projectLocationBucketLinkName
   *   A fully-qualified path representing project_location_bucket_link resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationBucketLinkName(projectLocationBucketLinkName: string) {
    return this.pathTemplates.projectLocationBucketLinkPathTemplate.match(projectLocationBucketLinkName).project;
  }

  /**
   * Parse the location from ProjectLocationBucketLink resource.
   *
   * @param {string} projectLocationBucketLinkName
   *   A fully-qualified path representing project_location_bucket_link resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationBucketLinkName(projectLocationBucketLinkName: string) {
    return this.pathTemplates.projectLocationBucketLinkPathTemplate.match(projectLocationBucketLinkName).location;
  }

  /**
   * Parse the bucket from ProjectLocationBucketLink resource.
   *
   * @param {string} projectLocationBucketLinkName
   *   A fully-qualified path representing project_location_bucket_link resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromProjectLocationBucketLinkName(projectLocationBucketLinkName: string) {
    return this.pathTemplates.projectLocationBucketLinkPathTemplate.match(projectLocationBucketLinkName).bucket;
  }

  /**
   * Parse the link from ProjectLocationBucketLink resource.
   *
   * @param {string} projectLocationBucketLinkName
   *   A fully-qualified path representing project_location_bucket_link resource.
   * @returns {string} A string representing the link.
   */
  matchLinkFromProjectLocationBucketLinkName(projectLocationBucketLinkName: string) {
    return this.pathTemplates.projectLocationBucketLinkPathTemplate.match(projectLocationBucketLinkName).link;
  }

  /**
   * Return a fully-qualified projectLocationBucketView resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} bucket
   * @param {string} view
   * @returns {string} Resource name string.
   */
  projectLocationBucketViewPath(project:string,location:string,bucket:string,view:string) {
    return this.pathTemplates.projectLocationBucketViewPathTemplate.render({
      project: project,
      location: location,
      bucket: bucket,
      view: view,
    });
  }

  /**
   * Parse the project from ProjectLocationBucketView resource.
   *
   * @param {string} projectLocationBucketViewName
   *   A fully-qualified path representing project_location_bucket_view resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationBucketViewName(projectLocationBucketViewName: string) {
    return this.pathTemplates.projectLocationBucketViewPathTemplate.match(projectLocationBucketViewName).project;
  }

  /**
   * Parse the location from ProjectLocationBucketView resource.
   *
   * @param {string} projectLocationBucketViewName
   *   A fully-qualified path representing project_location_bucket_view resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationBucketViewName(projectLocationBucketViewName: string) {
    return this.pathTemplates.projectLocationBucketViewPathTemplate.match(projectLocationBucketViewName).location;
  }

  /**
   * Parse the bucket from ProjectLocationBucketView resource.
   *
   * @param {string} projectLocationBucketViewName
   *   A fully-qualified path representing project_location_bucket_view resource.
   * @returns {string} A string representing the bucket.
   */
  matchBucketFromProjectLocationBucketViewName(projectLocationBucketViewName: string) {
    return this.pathTemplates.projectLocationBucketViewPathTemplate.match(projectLocationBucketViewName).bucket;
  }

  /**
   * Parse the view from ProjectLocationBucketView resource.
   *
   * @param {string} projectLocationBucketViewName
   *   A fully-qualified path representing project_location_bucket_view resource.
   * @returns {string} A string representing the view.
   */
  matchViewFromProjectLocationBucketViewName(projectLocationBucketViewName: string) {
    return this.pathTemplates.projectLocationBucketViewPathTemplate.match(projectLocationBucketViewName).view;
  }

  /**
   * Return a fully-qualified projectLog resource name string.
   *
   * @param {string} project
   * @param {string} log
   * @returns {string} Resource name string.
   */
  projectLogPath(project:string,log:string) {
    return this.pathTemplates.projectLogPathTemplate.render({
      project: project,
      log: log,
    });
  }

  /**
   * Parse the project from ProjectLog resource.
   *
   * @param {string} projectLogName
   *   A fully-qualified path representing project_log resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLogName(projectLogName: string) {
    return this.pathTemplates.projectLogPathTemplate.match(projectLogName).project;
  }

  /**
   * Parse the log from ProjectLog resource.
   *
   * @param {string} projectLogName
   *   A fully-qualified path representing project_log resource.
   * @returns {string} A string representing the log.
   */
  matchLogFromProjectLogName(projectLogName: string) {
    return this.pathTemplates.projectLogPathTemplate.match(projectLogName).log;
  }

  /**
   * Return a fully-qualified projectSettings resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectSettingsPath(project:string) {
    return this.pathTemplates.projectSettingsPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from ProjectSettings resource.
   *
   * @param {string} projectSettingsName
   *   A fully-qualified path representing project_settings resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSettingsName(projectSettingsName: string) {
    return this.pathTemplates.projectSettingsPathTemplate.match(projectSettingsName).project;
  }

  /**
   * Return a fully-qualified projectSink resource name string.
   *
   * @param {string} project
   * @param {string} sink
   * @returns {string} Resource name string.
   */
  projectSinkPath(project:string,sink:string) {
    return this.pathTemplates.projectSinkPathTemplate.render({
      project: project,
      sink: sink,
    });
  }

  /**
   * Parse the project from ProjectSink resource.
   *
   * @param {string} projectSinkName
   *   A fully-qualified path representing project_sink resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectSinkName(projectSinkName: string) {
    return this.pathTemplates.projectSinkPathTemplate.match(projectSinkName).project;
  }

  /**
   * Parse the sink from ProjectSink resource.
   *
   * @param {string} projectSinkName
   *   A fully-qualified path representing project_sink resource.
   * @returns {string} A string representing the sink.
   */
  matchSinkFromProjectSinkName(projectSinkName: string) {
    return this.pathTemplates.projectSinkPathTemplate.match(projectSinkName).sink;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.configServiceV2Stub && !this._terminated) {
      return this.configServiceV2Stub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
